//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TempUDPBroadcastCapture.TempServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Temp", Namespace="http://schemas.datacontract.org/2004/07/TempModtagerBroadcast")]
    [System.SerializableAttribute()]
    public partial class Temp : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TempsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Temps {
            get {
                return this.TempsField;
            }
            set {
                if ((object.ReferenceEquals(this.TempsField, value) != true)) {
                    this.TempsField = value;
                    this.RaisePropertyChanged("Temps");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TempServiceReference1.ITempService")]
    public interface ITempService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITempService/PostTempToDB", ReplyAction="http://tempuri.org/ITempService/PostTempToDBResponse")]
        int PostTempToDB(string temp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITempService/PostTempToDB", ReplyAction="http://tempuri.org/ITempService/PostTempToDBResponse")]
        System.Threading.Tasks.Task<int> PostTempToDBAsync(string temp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITempService/GetAllTemp", ReplyAction="http://tempuri.org/ITempService/GetAllTempResponse")]
        TempUDPBroadcastCapture.TempServiceReference1.Temp[] GetAllTemp();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITempService/GetAllTemp", ReplyAction="http://tempuri.org/ITempService/GetAllTempResponse")]
        System.Threading.Tasks.Task<TempUDPBroadcastCapture.TempServiceReference1.Temp[]> GetAllTempAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITempServiceChannel : TempUDPBroadcastCapture.TempServiceReference1.ITempService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TempServiceClient : System.ServiceModel.ClientBase<TempUDPBroadcastCapture.TempServiceReference1.ITempService>, TempUDPBroadcastCapture.TempServiceReference1.ITempService {
        
        public TempServiceClient() {
        }
        
        public TempServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TempServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TempServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TempServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int PostTempToDB(string temp) {
            return base.Channel.PostTempToDB(temp);
        }
        
        public System.Threading.Tasks.Task<int> PostTempToDBAsync(string temp) {
            return base.Channel.PostTempToDBAsync(temp);
        }
        
        public TempUDPBroadcastCapture.TempServiceReference1.Temp[] GetAllTemp() {
            return base.Channel.GetAllTemp();
        }
        
        public System.Threading.Tasks.Task<TempUDPBroadcastCapture.TempServiceReference1.Temp[]> GetAllTempAsync() {
            return base.Channel.GetAllTempAsync();
        }
    }
}
